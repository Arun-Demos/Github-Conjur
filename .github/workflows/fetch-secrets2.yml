name: fetch-secrets
on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  CONJUR_URL: https://aruntenant.secretsmgr.cyberark.cloud
  CONJUR_ACCOUNT: conjur
  CONJUR_AUTHN_ID: github
  # Make sure this EXACT id exists in Conjur (you confirmed it does):
  SECRET_ID: data/vault/StarAi-Dev/Arun-Staridb/username

jobs:
  get-secrets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Ensure tools for debug
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Show OIDC claims (temporary)
        if: always()
        run: |
          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_WORKFLOW=$GITHUB_WORKFLOW"
          echo "Requesting OIDC token with audience=conjur-cloud"
          resp="$(curl -sS -H "Authorization: bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" \
                       "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=conjur-cloud")"
          tok="$(echo "$resp" | jq -r .value)"
          if [ -z "$tok" ] ; then
            echo "No OIDC token returned! Full response:"
            echo "$resp"
            exit 1
          fi
          echo "$tok" | awk -F. '{print $2}' | base64 -d 2>/dev/null | jq '{repository, ref, workflow, sub, aud, iss}'

      - name: Import secrets from Conjur
        uses: cyberark/conjur-action@v2.0.12
        continue-on-error: true
        with:
          url:      ${{ env.CONJUR_URL }}
          account:  ${{ env.CONJUR_ACCOUNT }}
          authn_id: ${{ env.CONJUR_AUTHN_ID }}
          secrets:  ${{ env.SECRET_ID }}|DB_USERNAME

      - name: Use secret (redacted)
        if: always()
        run: |
          echo "DB_USERNAME length is ${#DB_USERNAME}"
          if [ -z "${DB_USERNAME}" ]; then
            echo "DB_USERNAME is empty (will debug below)."
          fi

      - name: Direct test against Conjur (debug)
        if: always()
        shell: bash
        run: |
          echo "=== Direct call to Conjur with OIDC ==="
          resp="$(curl -sS -H "Authorization: bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" \
                       "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=conjur-cloud")"
          jwt="$(echo "$resp" | jq -r .value)"
          if [ -z "$jwt" ]; then
            echo "Could not obtain OIDC token. Response:"
            echo "$resp"
            exit 1
          fi

          auth_url="${{ env.CONJUR_URL }}/authn-jwt/${{ env.CONJUR_AUTHN_ID }}/${{ env.CONJUR_ACCOUNT }}/authenticate"
          conjur_token="$(curl -sS --data-urlencode "jwt=${jwt}" "${auth_url}")"
          if [ -z "$conjur_token" ]; then
            echo "No Conjur access token returned from ${auth_url}"
            exit 1
          fi

          sec_url="${{ env.CONJUR_URL }}/secrets/${{ env.CONJUR_ACCOUNT }}/variable/${{ env.SECRET_ID }}"
          echo "GET $sec_url"
          out="$(curl -sS -w '\nHTTP %{http_code}\n' -H "Authorization: Token token=${conjur_token}" "$sec_url")"
          echo "$out" | sed -n 's/^HTTP/HTTP/p'
          echo "If HTTP 200 above, first line before HTTP is the secret value (not printed here)."
