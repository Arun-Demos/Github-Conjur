name: fetch-secrets
on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  CONJUR_URL: https://aruntenant.secretsmgr.cyberark.cloud
  CONJUR_ACCOUNT: conjur
  CONJUR_AUTHN_ID: github
  SECRET_ID: data/vault/StarAi-Dev/Arun-Staridb/username

jobs:
  get-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Marker A (start)
        run: echo "== Marker A =="

      - uses: actions/checkout@v4

      - name: Ensure tools for debug
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Show OIDC claims (temporary)
        if: ${{ always() }}
        run: |
          echo "GITHUB_REF=$GITHUB_REF"
          echo "GITHUB_WORKFLOW=$GITHUB_WORKFLOW"
          echo "Requesting OIDC token with audience=conjur-cloud"
          resp="$(curl -sS -H "Authorization: bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" \
                       "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=conjur-cloud")"
          tok="$(echo "$resp" | jq -r .value)"
          if [ -z "$tok" ] ; then
            echo "No OIDC token returned! Full response:"; echo "$resp"; exit 1
          fi
          echo "$tok" | awk -F. '{print $2}' | base64 -d 2>/dev/null | jq '{repository, ref, workflow, sub, aud, iss}'

      - name: Import secrets from Conjur
        uses: cyberark/conjur-action@v2.0.12
        continue-on-error: true
        with:
          url:      ${{ env.CONJUR_URL }}
          account:  ${{ env.CONJUR_ACCOUNT }}
          authn_id: ${{ env.CONJUR_AUTHN_ID }}
          secrets:  ${{ env.SECRET_ID }}|DB_USERNAME

      - name: Use secret (redacted)
        if: ${{ always() }}
        run: |
          echo "DB_USERNAME length is ${#DB_USERNAME}"
          if [ -z "${DB_USERNAME}" ]; then
            echo "DB_USERNAME is empty (will debug below)."
          fi

      - name: Direct test against Conjur (debug)
        if: ${{ always() }}
        shell: bash
        run: |
          echo "=== Get OIDC token ==="
          resp="$(curl -sS -H "Authorization: bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" \
                       "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=conjur-cloud")"
          jwt="$(echo "$resp" | jq -r .value)"
          if [ -z "$jwt" ]; then echo "No OIDC token"; echo "$resp"; exit 1; fi
      
          echo "=== Authenticate to Conjur (JWT -> access token JSON) ==="
          auth_url="${{ env.CONJUR_URL }}/api/authn-jwt/${{ env.CONJUR_AUTHN_ID }}/${{ env.CONJUR_ACCOUNT }}/authenticate"
          curl -sS --data-urlencode "jwt=${jwt}" "$auth_url" -o /tmp/auth.json
      
          echo "Auth JSON keys:"; jq -r 'keys|join(",")' /tmp/auth.json
      
          # Build COMPACT JWS: protected.payload.signature  (NO extra base64)
          conjur_token="$(jq -r '.protected + "." + .payload + "." + .signature' /tmp/auth.json | tr -d '\r\n')"
      
          # Sanity: must contain exactly two dots
          dotcount="$(printf "%s" "$conjur_token" | tr -cd '.' | wc -c | tr -d ' ')"
          echo "Compact token dot-count: $dotcount"
          if [ "$dotcount" != "2" ]; then
            echo "Token is not compact JWS. Body was:"; cat /tmp/auth.json; exit 1
          fi
      
          echo "=== Fetch secret with Authorization header ==="
          sec_url="${{ env.CONJUR_URL }}/api/secrets/${{ env.CONJUR_ACCOUNT }}/variable/${{ env.SECRET_ID }}"
          curl -sS -v -H "Authorization: Token token=${conjur_token}" "$sec_url" -o /tmp/sec.out 2>/tmp/curl.vlog || true
      
          echo "---- Sent Authorization header ----"
          grep -F '> Authorization:' /tmp/curl.vlog || echo "No Authorization header seen!"
          echo "-----------------------------------"
      
          code="$(grep -o 'HTTP/[0-9.]* [0-9][0-9][0-9]' /tmp/curl.vlog | tail -1 | awk '{print $2}')"
          echo "HTTP $code"
          if [ "$code" = "200" ]; then
            echo "Secret length: $(wc -c </tmp/sec.out)"
          else
            echo "Body:"; cat /tmp/sec.out
            exit 1
          fi




      - name: Marker Z (end)
        if: ${{ always() }}
        run: echo "== Marker Z =="
